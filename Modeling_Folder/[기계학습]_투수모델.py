# -*- coding: utf-8 -*-
"""[기계학습] 투수모델

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u0GHVP4PSQds-CHla6u1LkwlbOGS2KTV
"""

import numpy as np
import pandas as pd
from google.colab import drive
from sklearn.preprocessing import LabelEncoder

# 5개년 FA선수 데이터 불러오기
filename = '/content/5개년 FA선수 Data.xlsx'
df = pd.read_excel(filename)

#선수명 제거
df.drop('선수명', axis=1, inplace=True)

# 포지션(타자) 열 레이블 인코딩
label_encoder = LabelEncoder()
df['포지션(타자)'] = label_encoder.fit_transform(df['포지션(타자)'])

# 선수명과 포지션(타자) 열 데이터 유형을 숫자형으로 변환
df['포지션(타자)'] = df['포지션(타자)'].astype(int)

# 타자 데이터와 투수 데이터를 저장할 변수 초기화
타자_df = pd.DataFrame()
투수_df = pd.DataFrame()

# 열 이름을 확인하면서 "(타자)"를 포함하는 열은 타자 데이터로, "(투수)"를 포함하는 열은 투수 데이터로 분류
for column in df.columns:
    if "(타자)" in column:
        타자_df[column] = df[column]
    if "(투수)" in column:
        투수_df[column] = df[column]

# 연봉 열 넣기
타자_df["FA 연봉(억)"] = df["FA 연봉(억)"]
투수_df["FA 연봉(억)"] = df["FA 연봉(억)"]

#결측치 제거
투수df = 투수_df.dropna(subset=['나이(투수)'], inplace=False)

# 비어져있는 데이터 0처리
투수df.fillna(0, inplace=True)

투수_df_1 = 투수df[['선발(투수)', '승(투수)', '패(투수)', '이닝(투수)', '실점(투수)', '자책(투수)', '상대타자(투수)', '피안타(투수)', '피홈런(투수)', '탈삼진(투수)', '보크(투수)', 
                 '폭투(투수)', 'ERA+(투수)', 'FIP+(투수)', 'WAR(투수)', 'BB/9(투수)', 'K/BB(투수)', 'BB%(투수)', 'K-BB%(투수)', 'IP/G(투수)', 'CVP(투수)', '파크펙터조정 ERA+(투수)', 
                 'RAA 종합(투수)', '대체 Run 종합(투수)', 'RAR 종합(투수)', 'WAA 종합(투수)', 'fWAR(투수)', 'RA9-WAR(투수)', '선발WAR(투수)', '소화시즌(투수)', 'FA 연봉(억)']]

# "FA 연봉(억)" 열 제거 및 따로 정의
타자_salary = 타자_df.pop("FA 연봉(억)") #이제 df_removed에는 연봉이 제거됨
투수_salary = 투수_df_1.pop("FA 연봉(억)")

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor

X = 투수_df_1
y = 투수_salary

# 테스트 세트 분할
train_input, test_input, train_target, test_target = train_test_split(X, y, test_size=0.3, random_state=42)

# 최적의 CV 값을 탐색하기 위한 범위 설정
cv_values = [3, 5, 7, 10]

best_cv = None
best_score = -1

for cv in cv_values:
    # GridSearchCV를 사용하여 파라미터 탐색
    param_grid = {
        'n_estimators': [100, 200, 300],
        'max_depth': [None, 10, 20],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4]
    }
    grid_search = GridSearchCV(RandomForestRegressor(random_state=42), param_grid, cv=cv)
    grid_search.fit(train_input, train_target)
    
    # GridSearchCV의 최고 점수와 파라미터 조합 확인
    score = grid_search.best_score_
    print(f"CV={cv}: 최고 점수={score}, 최적의 파라미터 조합={grid_search.best_params_}")
    
    # 현재 CV 값의 점수가 더 높으면 최적의 CV 값 및 점수 업데이트
    if score > best_score:
        best_cv = cv
        best_score = score

print("최적의 CV 값:", best_cv)

# 최적의 CV 값을 기반으로 파라미터 탐색
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# GridSearchCV를 사용하여 파라미터 탐색
grid_search = GridSearchCV(RandomForestRegressor(random_state=42), param_grid, cv=best_cv)
grid_search.fit(train_input, train_target)

# 최적의 파라미터 조합 출력
best_params = grid_search.best_params_
print("최적의 파라미터 조합:", best_params)

# 최적의 파라미터로 모델 생성
best_model = grid_search.best_estimator_

# test 정확도 평가
투수test_accuracy = best_model.score(test_input, test_target)
print("test 정확도:", 투수test_accuracy)

# train 정확도 평가
투수train_accuracy = best_model.score(train_input, train_target)
print("train 정확도:", 투수train_accuracy)

# 2024 FA선수 데이터 불러오기
filename1 = '/content/2024 선수기록.xlsx'
df1 = pd.read_excel(filename1)

# 선수명 제거
df1.drop('선수명', axis=1, inplace=True)

# 포지션(타자) 열 레이블 인코딩
label_encoder = LabelEncoder()
df1['포지션(타자)'] = label_encoder.fit_transform(df1['포지션(타자)'])

# 선수명과 포지션(타자) 열 데이터 유형을 숫자형으로 변환
df1['포지션(타자)'] = df1['포지션(타자)'].astype(int)

# 타자 데이터와 투수 데이터를 저장할 변수 초기화
new타자_df = pd.DataFrame()
new투수_df = pd.DataFrame()

# 열 이름을 확인하면서 "(타자)"를 포함하는 열은 타자 데이터로, "(투수)"를 포함하는 열은 투수 데이터로 분류
for column in df1.columns:
    if "(타자)" in column:
        new타자_df[column] = df1[column]
    if "(투수)" in column:
        new투수_df[column] = df1[column]

#결측치 제거
new투수df = new투수_df.dropna(subset=['나이(투수)'], inplace=False)

# 비어져있는 데이터 0처리
new투수df.fillna(0, inplace=True)

#X인자 재설정
new_FA_df = new투수df[['선발(투수)', '승(투수)', '패(투수)', '이닝(투수)', '실점(투수)', '자책(투수)', '상대타자(투수)', '피안타(투수)', '피홈런(투수)', '탈삼진(투수)', '보크(투수)', 
                 '폭투(투수)', 'ERA+(투수)', 'FIP+(투수)', 'WAR(투수)', 'BB/9(투수)', 'K/BB(투수)', 'BB%(투수)', 'K-BB%(투수)', 'IP/G(투수)', 'CVP(투수)', '파크펙터조정 ERA+(투수)', 
                 'RAA 종합(투수)', '대체 Run 종합(투수)', 'RAR 종합(투수)', 'WAA 종합(투수)', 'fWAR(투수)', 'RA9-WAR(투수)', '선발WAR(투수)', '소화시즌(투수)']]

# 테스트 데이터에 대한 예측 수행
new_FA_predictions = best_model.predict(new_FA_df)

# 예측 결과 출력
print("2024년도 데이터 예측 결과:", new_FA_predictions)

output_file_1 = "/content/new_FA_predictions(투수).txt"  # 저장할 파일 경로와 이름 지정

with open(output_file_1, "w") as f:
    for feature in new_FA_predictions:
        f.write(str(feature) + "\n")